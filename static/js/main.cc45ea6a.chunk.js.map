{"version":3,"sources":["styles/button.module.scss","drawers/PointDrawer.ts","drawers/SegmentDrawer.ts","drawers/SceneDrawer.ts","business/Point.ts","MouseEvents.ts","DrawingModeContext.ts","Drawer.tsx","Button.tsx","ButtonsList.tsx","DrawingPalette.tsx","StatesPlayer.tsx","AlgorithmsList.tsx","App.tsx","hooks/drawingMode.hook.ts","index.tsx"],"names":["module","exports","PointDrawer","points","scene","color","length","index","p","geometry","CircleGeometry","material","MeshBasicMaterial","circle","Mesh","position","setX","x","setY","y","add","SegmentDrawer","segments","segment","LineBasicMaterial","push","start","toVector2","end","BufferGeometry","setFromPoints","line","Line","SceneDrawer","pointDrawer","segmentDrawer","inputPoints","inputSegments","beingDrawenPoint","beingDrawenSegment","remove","apply","children","this","draw","Color","Point","id","IDs","Vector2","MouseEvents","canvas","document","getElementById","mouseX","mouseY","rect","getBoundingClientRect","scaleX","width","scaleY","height","scaledPoint","left","top","drawingMode","e","button","getPoint","clientX","clientY","DEFAULT_DRAWING_MODE_VALUE","setCurrentDrawingMode","drawingModeContext","React","createContext","Drawer","myCanvas","useRef","useState","setInputPoints","setInputSegments","Scene","sceneDrawer","useMemo","mouseEvents","useContext","setBeingDrawenPoint","setBeingDrawenSegment","useEffect","renderer","WebGLRenderer","current","setClearColor","camera","OrthographicCamera","z","animate","requestAnimationFrame","render","onMouseDown","res","Error","point","onMouseMove","onMouseLeave","ref","style","border","Button","props","backgroundColor","originalColor","myClasses","classNames","classes","myButton","clicked","isClicked","clickedColor","onClick","value","className","ButtonsList","buttons","setButtons","useCallback","find","b","newButtons","map","newButton","key","DrawingPalette","btn","StatesPlayer","display","justifyContent","type","role","AlgorithmsList","console","log","names","name","drawingButtons","algorithms","App","setDrawingMode","newDrawingMode","useDrawingMode","Provider","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.cc45ea6a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"clicked\":\"button_clicked__R6E18\",\"myButton\":\"button_myButton__2Rz3z\",\"wiggle\":\"button_wiggle__3rqZd\"};","import Point from \"../business/Point\";\nimport { Scene, Mesh, CircleGeometry, MeshBasicMaterial, Color } from \"three\";\n\nexport default class PointDrawer {\n  draw(points: Point[], scene: Scene, color: Color) {\n    if (points.length === 0) return;\n    for (let index = 0; index < points.length; index++) {\n      const p = points[index];\n      const geometry = new CircleGeometry(2, 10);\n      const material = new MeshBasicMaterial({ color: color });\n      const circle = new Mesh(geometry, material);\n      circle.position.setX(p.x);\n      circle.position.setY(p.y);\n      scene.add(circle);\n    }\n  }\n}\n","import Segment from \"../business/Segment\";\nimport { Scene, LineBasicMaterial, BufferGeometry, Vector2, Line } from \"three\";\n\nexport default class SegmentDrawer {\n  draw(segments: Segment[], scene: Scene) {\n    if (segments.length === 0) return [];\n\n    for (let index = 0; index < segments.length; index++) {\n      const segment = segments[index];\n      const material = new LineBasicMaterial({\n        color: 0x0000ff,\n      });\n\n      const points: Vector2[] = [];\n      points.push(segment.start.toVector2());\n      points.push(segment.end.toVector2());\n\n      const geometry = new BufferGeometry().setFromPoints(points);\n\n      const line = new Line(geometry, material);\n      scene.add(line);\n    }\n  }\n}\n","import PointDrawer from \"./PointDrawer\";\nimport { Scene, Color } from \"three\";\nimport SegmentDrawer from \"./SegmentDrawer\";\nimport Segment from \"../business/Segment\";\nimport Point from \"../business/Point\";\n\nexport default class SceneDrawer {\n  pointDrawer: PointDrawer = new PointDrawer();\n  segmentDrawer: SegmentDrawer = new SegmentDrawer();\n\n  draw(\n    scene: Scene,\n    inputPoints: Point[],\n    inputSegments: Segment[],\n    beingDrawenPoint: Point | null,\n    beingDrawenSegment: Segment | null\n  ) {\n    //TODO: Do that more efficiently\n    //clearScene\n    if (beingDrawenPoint) {\n      inputPoints = [...inputPoints, beingDrawenPoint];\n    }\n    if (beingDrawenSegment) {\n      inputSegments = [...inputSegments, beingDrawenSegment];\n    }\n    scene.remove.apply(scene, scene.children);\n    this.pointDrawer.draw(inputPoints, scene, new Color(\"green\"));\n    this.segmentDrawer.draw(inputSegments, scene);\n  }\n}\n","import { Vector2 } from \"three\";\n\nexport default class Point {\n  x: number;\n  y: number;\n  id: number;\n  static IDs: number = 0;\n  constructor(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n    this.id = Point.IDs++;\n  }\n  toVector2() {\n    return new Vector2(this.x, this.y);\n  }\n}\n","import Point from \"./business/Point\";\nimport Segment from \"./business/Segment\";\n\nexport default class MouseEvents {\n  canvas: HTMLCanvasElement;\n  constructor() {\n    this.canvas = document.getElementById(\n      \"element that does not exist\"\n    ) as HTMLCanvasElement;\n  }\n  private getPoint(mouseX: number, mouseY: number): Point {\n    const rect = this.canvas.getBoundingClientRect();\n    const scaleX = this.canvas.width / rect.width;\n    const scaleY = this.canvas.height / rect.height;\n\n    const scaledPoint = new Point(\n      (mouseX - rect.left) * scaleX,\n      (mouseY - rect.top) * scaleY\n    );\n\n    const transformedPoint = new Point(\n      scaledPoint.x - this.canvas.width / 2,\n      this.canvas.height / 2 - scaledPoint.y\n    );\n    return transformedPoint;\n  }\n  onMouseDown(\n    drawingMode: string,\n    e: React.MouseEvent\n  ): (Point | Segment | /*Polygon |*/ null)[] {\n    if (e.button !== 0) return [null, null, null];\n\n    if (drawingMode === \"Point\") {\n      const point = this.getPoint(e.clientX, e.clientY);\n      return [point, null, null];\n    }\n\n    return [null, null, null];\n  }\n  onMouseMove(\n    drawingMode: string,\n    e: React.MouseEvent\n  ): (Point | Segment | /*Polygon |*/ null)[] {\n    if (drawingMode === \"Nothing\") return [null, null, null];\n    if (drawingMode === \"Point\") {\n      const point = this.getPoint(e.clientX, e.clientY);\n      return [point, null, null];\n    }\n    return [null, null, null];\n  }\n}\n","import React from \"react\";\n\nexport interface DrawingModeContext {\n  drawingMode: string;\n  setCurrentDrawingMode: (currentDrawingMode: string) => void;\n}\n\nexport const DEFAULT_DRAWING_MODE_VALUE = {\n  drawingMode: \"Nothing\",\n  setCurrentDrawingMode: () => {},\n};\n\nexport const drawingModeContext = React.createContext<DrawingModeContext>(\n  DEFAULT_DRAWING_MODE_VALUE\n);\n","import React, { useRef, useEffect, useState, useMemo } from \"react\";\nimport { WebGLRenderer, Scene, OrthographicCamera, Color } from \"three\";\nimport Point from \"./business/Point\";\nimport Segment from \"./business/Segment\";\nimport SceneDrawer from \"./drawers/SceneDrawer\";\nimport MouseEvents from \"./MouseEvents\";\nimport { drawingModeContext } from \"./DrawingModeContext\";\n\n//FIXME: We should not need that.\nfunction getTempCanvas(): HTMLCanvasElement {\n  return document.getElementById(\n    \"element that does not exist\"\n  ) as HTMLCanvasElement;\n}\n\nfunction Drawer() {\n  const myCanvas = useRef<HTMLCanvasElement>(getTempCanvas());\n  const [inputPoints, setInputPoints] = useState<Point[]>([]);\n  const [inputSegments, setInputSegments] = useState<Segment[]>([]);\n  const [scene] = useState<Scene>(new Scene());\n  const sceneDrawer = useMemo(() => new SceneDrawer(), []);\n  const mouseEvents = useMemo(() => new MouseEvents(), []);\n  const { drawingMode } = React.useContext(drawingModeContext);\n  const [beingDrawenPoint, setBeingDrawenPoint] = useState<Point | null>(null);\n  const [beingDrawenSegment, setBeingDrawenSegment] = useState<Segment | null>(\n    null\n  );\n  useEffect(() => {\n    const renderer = new WebGLRenderer({ canvas: myCanvas.current });\n    renderer.setClearColor(new Color(\"white\"));\n    const camera = new OrthographicCamera(\n      -myCanvas.current.width / 2,\n      myCanvas.current.width / 2,\n      myCanvas.current.height / 2,\n      myCanvas.current.height / -2,\n      0.01,\n      2000\n    );\n    camera.position.z = 50;\n    mouseEvents.canvas = myCanvas.current;\n    const animate = function () {\n      requestAnimationFrame(animate);\n      renderer.render(scene, camera);\n    };\n    animate();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    sceneDrawer.draw(\n      scene,\n      inputPoints,\n      inputSegments,\n      beingDrawenPoint,\n      beingDrawenSegment\n    );\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [inputPoints, inputSegments, beingDrawenPoint, beingDrawenSegment]);\n\n  const onMouseDown = function (e: React.MouseEvent) {\n    const res = mouseEvents.onMouseDown(drawingMode, e);\n    if (res.length !== 3)\n      throw Error(\"onMouseDown must return 3 items, [Point, Segment, Polygon]\");\n    const point = res[0] as Point;\n    const segment = res[1] as Segment;\n    if (point) setInputPoints([...inputPoints, point]);\n    if (segment) setInputSegments([...inputSegments, segment]);\n  };\n\n  const onMouseMove = function (e: React.MouseEvent) {\n    const res = mouseEvents.onMouseMove(drawingMode, e);\n    if (res.length !== 3)\n      throw Error(\"onMouseMove must return 3 items, [Point, Segment, Polygon]\");\n    const point = res[0] as Point;\n    const segment = res[1] as Segment;\n    if (point) setBeingDrawenPoint(point);\n    if (segment) setBeingDrawenSegment(segment);\n  };\n\n  const onMouseLeave = function () {\n    setBeingDrawenPoint(null);\n    setBeingDrawenSegment(null);\n  };\n\n  return (\n    <canvas\n      onMouseDown={onMouseDown}\n      onMouseMove={onMouseMove}\n      onMouseLeave={onMouseLeave}\n      ref={myCanvas}\n      width=\"500\"\n      height=\"500\"\n      style={{ border: \"1px solid black\" }}\n    ></canvas>\n  );\n}\n\nexport default Drawer;\n","import React from \"react\";\nimport classes from \"./styles/button.module.scss\";\nimport classNames from \"classnames\";\n\nexport interface ButtonProps {\n  onClick: (value: string) => void;\n  value: string;\n  originalColor: string;\n  clickedColor: string;\n  isClicked: boolean;\n}\n\nfunction Button(props: ButtonProps) {\n  const style = {\n    backgroundColor: props.originalColor,\n  };\n  const myClasses = classNames({\n    [classes.myButton]: true,\n    [classes.clicked]: props.isClicked,\n  });\n\n  if (props.isClicked) {\n    style.backgroundColor = props.clickedColor;\n  }\n  const onClick = function () {\n    if (!props.isClicked) props.onClick(props.value);\n  };\n  return (\n    <button style={style} onClick={onClick} className={myClasses}>\n      {props.value}\n    </button>\n  );\n}\n\nexport default Button;\n","import React, { useCallback, useState, useEffect } from \"react\";\nimport Button, { ButtonProps } from \"./Button\";\n\ninterface Props {\n  buttons: ButtonProps[];\n}\n\nconst ButtonsList = function (props: Props) {\n  const [buttons, setButtons] = useState<ButtonProps[]>([]);\n\n  useEffect(() => {\n    setButtons(props.buttons);\n  }, [props.buttons]);\n\n  const onClick = useCallback(\n    function (value: string): void {\n      //TODO: Change the current drawingContext\n      const button = buttons.find((b) => b.value === value);\n      if (!button) throw Error(`value ${value} must be found!`);\n\n      if (button.isClicked)\n        throw Error(\n          `this function should not be called if the button is already clicked!`\n        );\n\n      const newButtons = buttons.map((button) =>\n        button.value === value\n          ? { ...button, isClicked: true }\n          : { ...button, isClicked: false }\n      );\n      setButtons(newButtons);\n    },\n    [buttons]\n  );\n\n  return (\n    <div>\n      {buttons.map((button) => {\n        const newButton = {\n          ...button,\n          onClick: (value: string) => {\n            onClick(value);\n            button.onClick(value);\n          },\n        };\n        return <Button key={newButton.value} {...newButton}></Button>;\n      })}\n    </div>\n  );\n};\n\nexport { ButtonsList };\n","import React, { useCallback } from \"react\";\nimport { ButtonProps } from \"./Button\";\nimport { ButtonsList } from \"./ButtonsList\";\nimport { drawingModeContext } from \"./DrawingModeContext\";\n\ninterface Props {\n  buttons: Omit<ButtonProps, \"onClick\">[];\n}\n\nfunction DrawingPalette(props: Props) {\n  const { drawingMode, setCurrentDrawingMode } = React.useContext(\n    drawingModeContext\n  );\n\n  const onClick = useCallback(\n    function (value: string) {\n      setCurrentDrawingMode(value);\n    },\n    [setCurrentDrawingMode]\n  );\n\n  const buttons = props.buttons.map((btn) =>\n    btn.value === drawingMode\n      ? { ...btn, onClick, isClicked: true }\n      : { ...btn, onClick }\n  );\n\n  return (\n    <div className=\"btn-group-vertical\">\n      <ButtonsList buttons={buttons} />\n      <span>{drawingMode}</span>\n    </div>\n  );\n}\n\nexport default DrawingPalette;\n","import React from \"react\";\n\nexport const StatesPlayer = function () {\n  return (\n    <>\n      <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n        <button type=\"button\" className=\"btn btn-primary\">\n          {\"<<\"}\n        </button>\n        <button type=\"button\" className=\"btn btn-primary\">\n          {\"<\"}\n        </button>\n        <button type=\"button\" className=\"btn btn-primary\">\n          {\"Start\"}\n        </button>\n        <button type=\"button\" className=\"btn btn-primary\">\n          {\">\"}\n        </button>\n        <button type=\"button\" className=\"btn btn-primary\">\n          {\">>\"}\n        </button>\n      </div>\n      <br></br>\n      <div className=\"progress\">\n        <div\n          className=\"progress-bar progress-bar-striped progress-bar-animated\"\n          role=\"progressbar\"\n          style={{ width: \"75%\" }}\n        ></div>\n      </div>\n    </>\n  );\n};\n","import React from \"react\";\nimport { ButtonsList } from \"./ButtonsList\";\ninterface AlgorithmsListPropTypes {\n  names: string[];\n}\n\nconst AlgorithmsList = function (props: AlgorithmsListPropTypes) {\n  const onClick = function (value: string) {\n    console.log(`algorithm: ${value}`);\n  };\n  const buttons = props.names.map((name) => ({\n    value: name,\n    //TODO: Get those from config.\n    clickedColor: \"darkblue\",\n    originalColor: \"lightblue\",\n    isClicked: false,\n    onClick: onClick,\n  }));\n  return (\n    <>\n      <h2>Algorithms</h2>\n      <ButtonsList buttons={buttons} />\n    </>\n  );\n};\n\nexport default AlgorithmsList;\n","import React from \"react\";\nimport Drawer from \"./Drawer\";\nimport DrawingPalette from \"./DrawingPalette\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { drawingModeContext } from \"./DrawingModeContext\";\nimport { StatesPlayer } from \"./StatesPlayer\";\nimport AlgorithmsList from \"./AlgorithmsList\";\nimport { useDrawingMode } from \"./hooks/drawingMode.hook\";\n\n//TODO: Move that to config.\nconst drawingButtons = (function () {\n  const ret = [\n    {\n      isClicked: false,\n      value: \"Nothing\",\n      originalColor: \"lightgrey\",\n      clickedColor: \"grey\",\n    },\n    {\n      isClicked: false,\n      value: \"Point\",\n      originalColor: \"#fe2636\",\n      clickedColor: \"darkred\",\n    },\n    {\n      isClicked: false,\n      value: \"Line\",\n      originalColor: \"#f5dd33\",\n      clickedColor: \"#f9a905\",\n    },\n    {\n      isClicked: false,\n      value: \"Polygon\",\n      originalColor: \"#90eb35\",\n      clickedColor: \"green\",\n    },\n  ];\n  return ret;\n})();\nconst algorithms = [\"algo 1\", \"algo 2\"];\n\nfunction App() {\n  const drawingMode = useDrawingMode();\n  return (\n    <drawingModeContext.Provider value={drawingMode}>\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-sm-3\">\n            <AlgorithmsList names={algorithms} />\n          </div>\n          <div className=\"col-sm-6\">\n            <Drawer />\n            <StatesPlayer />\n          </div>\n          <div className=\"col-sm-3\">\n            <DrawingPalette buttons={drawingButtons} />\n          </div>\n        </div>\n      </div>\n    </drawingModeContext.Provider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport {\n  DrawingModeContext,\n  DEFAULT_DRAWING_MODE_VALUE,\n} from \"../DrawingModeContext\";\n\nexport const useDrawingMode = (): DrawingModeContext => {\n  const [drawingMode, setDrawingMode] = React.useState(\n    DEFAULT_DRAWING_MODE_VALUE.drawingMode\n  );\n\n  const setCurrentDrawingMode = React.useCallback(\n    (newDrawingMode: string): void => {\n      setDrawingMode(newDrawingMode);\n    },\n    []\n  );\n\n  return {\n    drawingMode,\n    setCurrentDrawingMode,\n  };\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}