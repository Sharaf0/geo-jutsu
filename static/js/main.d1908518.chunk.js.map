{"version":3,"sources":["business/Point.ts","drawers/PointDrawer.ts","drawers/SegmentDrawer.ts","drawers/SceneDrawer.ts","Drawer.tsx","App.tsx","index.tsx"],"names":["Point","x","y","id","this","IDs","Vector2","PointDrawer","points","scene","color","length","index","p","geometry","CircleGeometry","material","MeshBasicMaterial","circle","Mesh","position","setX","setY","add","SegmentDrawer","segments","segment","LineBasicMaterial","Array","push","start","toVector2","end","BufferGeometry","setFromPoints","line","Line","SceneDrawer","pointDrawer","segmentDrawer","inputPoints","inputSegments","remove","apply","children","draw","Color","Drawer","myCanvas","useRef","document","getElementById","useState","setInputPoints","Scene","sceneDrawer","useMemo","useEffect","renderer","WebGLRenderer","canvas","current","setClearColor","camera","OrthographicCamera","width","height","z","animate","requestAnimationFrame","render","onMouseDown","e","rect","getBoundingClientRect","scaleX","scaleY","scaledPoint","clientX","left","clientY","top","transformedPoint","ref","style","border","App","justifyContent","display","marginTop","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.d1908518.chunk.js","sourcesContent":["import { Vector2 } from \"three\";\r\n\r\nexport default class Point {\r\n  x: number;\r\n  y: number;\r\n  id: number;\r\n  static IDs: number = 0;\r\n  constructor(x: number, y: number) {\r\n    this.x = x;\r\n    this.y = y;\r\n    this.id = Point.IDs++;\r\n  }\r\n  toVector2() {\r\n    return new Vector2(this.x, this.y);\r\n  }\r\n}","import Point from \"../business/Point\";\r\nimport { Scene, Mesh, CircleGeometry, MeshBasicMaterial, Color } from \"three\";\r\n\r\nexport default class PointDrawer {\r\n  draw(points: Array<Point>, scene: Scene, color: Color) {\r\n    if (points.length === 0)\r\n      return;\r\n    for (let index = 0; index < points.length; index++) {\r\n      const p = points[index];\r\n      const geometry = new CircleGeometry(2, 10);\r\n      const material = new MeshBasicMaterial({ color: color });\r\n      const circle = new Mesh(geometry, material);\r\n      circle.position.setX(p.x);\r\n      circle.position.setY(p.y);\r\n      scene.add(circle);\r\n    }\r\n  }\r\n}","import Segment from \"../business/Segment\";\r\nimport { Scene, LineBasicMaterial, BufferGeometry, Vector2, Line } from \"three\";\r\n\r\nexport default class SegmentDrawer {\r\n  draw(segments: Array<Segment>, scene: Scene) {\r\n    if (segments.length === 0)\r\n      return [];\r\n      \r\n    for (let index = 0; index < segments.length; index++) {\r\n      const segment = segments[index];\r\n      const material = new LineBasicMaterial({\r\n        color: 0x0000ff\r\n      });\r\n\r\n      const points = new Array<Vector2>();\r\n      points.push(segment.start.toVector2());\r\n      points.push(segment.end.toVector2());\r\n\r\n      const geometry = new BufferGeometry().setFromPoints(points);\r\n\r\n      const line = new Line(geometry, material);\r\n      scene.add(line);\r\n    }\r\n  }\r\n}","import PointDrawer from \"./PointDrawer\";\r\nimport { Scene, Color } from \"three\";\r\nimport SegmentDrawer from \"./SegmentDrawer\";\r\nimport Segment from \"../business/Segment\";\r\nimport Point from \"../business/Point\";\r\n\r\nexport default class SceneDrawer {\r\n  pointDrawer: PointDrawer = new PointDrawer();\r\n  segmentDrawer: SegmentDrawer = new SegmentDrawer();\r\n\r\n  draw(scene: Scene, inputPoints: Array<Point>, inputSegments: Array<Segment>) {\r\n        //clearScene\r\n    //TODO: Do that more efficiently\r\n    scene.remove.apply(scene, scene.children);\r\n    this.pointDrawer.draw(inputPoints, scene, new Color('red'));\r\n    this.segmentDrawer.draw(inputSegments, scene);\r\n\r\n  }\r\n}","import React, { useRef, useEffect, useState, useMemo } from 'react';\r\nimport {\r\n  WebGLRenderer,\r\n  Scene,\r\n  OrthographicCamera,\r\n  Color,\r\n  Vector2,\r\n} from \"three\";\r\nimport Point from './business/Point';\r\nimport Segment from './business/Segment';\r\nimport SceneDrawer from './drawers/SceneDrawer';\r\n\r\n//FIXME: We should not need that.\r\nfunction getTempCanvas(): HTMLCanvasElement {\r\n  return document.getElementById('element that does not exist') as HTMLCanvasElement;\r\n}\r\n\r\nfunction Drawer() {\r\n  const myCanvas = useRef<HTMLCanvasElement>(getTempCanvas());\r\n  const [inputPoints, setInputPoints] = useState<Array<Point>>([]);\r\n  const [inputSegments] = useState<Array<Segment>>([]);\r\n  const [scene] = useState<Scene>(new Scene());\r\n  const sceneDrawer = useMemo(() => new SceneDrawer(), []);\r\n\r\n  useEffect(() => {\r\n    const renderer = new WebGLRenderer({ canvas: myCanvas.current });\r\n    renderer.setClearColor(new Color('white'));\r\n    const camera = new OrthographicCamera(- myCanvas.current.width / 2, myCanvas.current.width / 2, myCanvas.current.height / 2, myCanvas.current.height / -2, 0.01, 2000);\r\n    camera.position.z = 50;\r\n    const animate = function () {\r\n      requestAnimationFrame(animate);\r\n      renderer.render(scene, camera);\r\n    };\r\n    animate();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    sceneDrawer.draw(scene, inputPoints, inputSegments);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [inputPoints, inputSegments]);\r\n\r\n  function onMouseDown(e: React.MouseEvent) {\r\n    const rect = myCanvas.current.getBoundingClientRect();\r\n    const scaleX = myCanvas.current.width / rect.width;\r\n    const scaleY = myCanvas.current.height / rect.height;\r\n\r\n    const scaledPoint = new Vector2((e.clientX - rect.left) * scaleX, (e.clientY - rect.top) * scaleY);\r\n\r\n    const transformedPoint = new Point(scaledPoint.x - myCanvas.current.width / 2,\r\n      myCanvas.current.height / 2 - scaledPoint.y);\r\n\r\n    setInputPoints([...inputPoints, transformedPoint])\r\n  }\r\n\r\n  return (\r\n    <canvas onMouseDown={onMouseDown} ref={myCanvas} width=\"500\" height=\"500\" style={{ border: \"1px solid black\" }}></canvas>\r\n  );\r\n}\r\n\r\nexport default Drawer;\r\n","import React from 'react';\r\nimport Drawer from './Drawer';\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <div style={{ justifyContent: \"center\", display: \"flex\", marginTop: 10 }}>\r\n      <Drawer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}