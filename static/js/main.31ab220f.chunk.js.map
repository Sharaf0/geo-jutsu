{"version":3,"sources":["drawers/PointDrawer.ts","drawers/SegmentDrawer.ts","drawers/SceneDrawer.ts","business/Point.ts","MouseEvents.ts","Drawer.tsx","Button.tsx","ButtonsList.tsx","DrawingPalette.tsx","DrawingContext.ts","StatesPlayer.tsx","AlgorithmsList.tsx","App.tsx","index.tsx","styles/button.module.scss"],"names":["PointDrawer","points","scene","color","length","index","p","geometry","CircleGeometry","material","MeshBasicMaterial","circle","Mesh","position","setX","x","setY","y","add","SegmentDrawer","segments","segment","LineBasicMaterial","push","start","toVector2","end","BufferGeometry","setFromPoints","line","Line","SceneDrawer","pointDrawer","segmentDrawer","inputPoints","inputSegments","remove","apply","children","this","draw","Color","Point","id","IDs","Vector2","MouseEvents","canvas","document","getElementById","e","button","rect","getBoundingClientRect","scaleX","width","scaleY","height","scaledPoint","clientX","left","clientY","top","Drawer","myCanvas","useRef","useState","setInputPoints","setInputSegments","Scene","sceneDrawer","useMemo","mouseEvents","useEffect","renderer","WebGLRenderer","current","setClearColor","camera","OrthographicCamera","z","animate","requestAnimationFrame","render","onMouseDown","res","Error","point","ref","style","border","Button","props","backgroundColor","originalColor","myClasses","classNames","classes","myButton","clicked","isClicked","clickedColor","onClick","value","className","ButtonsList","useCallback","buttons","find","b","console","log","map","newButton","key","DrawingPalette","alert","DrawingContext","React","createContext","StatesPlayer","display","justifyContent","type","role","AlgorithmsList","names","name","drawingButtons","algorithms","App","Provider","ReactDOM","StrictMode","module","exports"],"mappings":"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","file":"static/js/main.31ab220f.chunk.js","sourcesContent":["import Point from \"../business/Point\";\nimport { Scene, Mesh, CircleGeometry, MeshBasicMaterial, Color } from \"three\";\n\nexport default class PointDrawer {\n  draw(points: Point[], scene: Scene, color: Color) {\n    if (points.length === 0)\n      return;\n    for (let index = 0; index < points.length; index++) {\n      const p = points[index];\n      const geometry = new CircleGeometry(2, 10);\n      const material = new MeshBasicMaterial({ color: color });\n      const circle = new Mesh(geometry, material);\n      circle.position.setX(p.x);\n      circle.position.setY(p.y);\n      scene.add(circle);\n    }\n  }\n}","import Segment from \"../business/Segment\";\nimport { Scene, LineBasicMaterial, BufferGeometry, Vector2, Line } from \"three\";\n\nexport default class SegmentDrawer {\n  draw(segments: Segment[], scene: Scene) {\n    if (segments.length === 0)\n      return [];\n      \n    for (let index = 0; index < segments.length; index++) {\n      const segment = segments[index];\n      const material = new LineBasicMaterial({\n        color: 0x0000ff\n      });\n\n      const points: Vector2[] = [];\n      points.push(segment.start.toVector2());\n      points.push(segment.end.toVector2());\n\n      const geometry = new BufferGeometry().setFromPoints(points);\n\n      const line = new Line(geometry, material);\n      scene.add(line);\n    }\n  }\n}","import PointDrawer from \"./PointDrawer\";\nimport { Scene, Color } from \"three\";\nimport SegmentDrawer from \"./SegmentDrawer\";\nimport Segment from \"../business/Segment\";\nimport Point from \"../business/Point\";\n\nexport default class SceneDrawer {\n  pointDrawer: PointDrawer = new PointDrawer();\n  segmentDrawer: SegmentDrawer = new SegmentDrawer();\n\n  draw(scene: Scene, inputPoints: Point[], inputSegments: Segment[]) {\n    //TODO: Do that more efficiently\n    //clearScene\n    scene.remove.apply(scene, scene.children);\n    this.pointDrawer.draw(inputPoints, scene, new Color('green'));\n    this.segmentDrawer.draw(inputSegments, scene);\n  }\n}","import { Vector2 } from \"three\";\n\nexport default class Point {\n  x: number;\n  y: number;\n  id: number;\n  static IDs: number = 0;\n  constructor(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n    this.id = Point.IDs++;\n  }\n  toVector2() {\n    return new Vector2(this.x, this.y);\n  }\n}","import Point from \"./business/Point\";\nimport Segment from \"./business/Segment\";\n\nexport default class MouseEvents {\n  canvas: HTMLCanvasElement;\n  constructor() {\n    this.canvas = document.getElementById('element that does not exist') as HTMLCanvasElement;\n  }\n  onMouseDown(e: React.MouseEvent): (Point | Segment | /*Polygon |*/ null)[] {\n    if (e.button !== 0)\n      return [null, null, null];\n\n    const rect = this.canvas.getBoundingClientRect();\n    const scaleX = this.canvas.width / rect.width;\n    const scaleY = this.canvas.height / rect.height;\n\n    const scaledPoint = new Point((e.clientX - rect.left) * scaleX, (e.clientY - rect.top) * scaleY);\n\n    const transformedPoint = new Point(scaledPoint.x - this.canvas.width / 2,\n      this.canvas.height / 2 - scaledPoint.y);\n\n    return [transformedPoint, null, null];\n  }\n}","import React, { useRef, useEffect, useState, useMemo } from 'react';\nimport {\n  WebGLRenderer,\n  Scene,\n  OrthographicCamera,\n  Color,\n} from \"three\";\nimport Point from './business/Point';\nimport Segment from './business/Segment';\nimport SceneDrawer from './drawers/SceneDrawer';\nimport MouseEvents from './MouseEvents';\n\n//FIXME: We should not need that.\nfunction getTempCanvas(): HTMLCanvasElement {\n  return document.getElementById('element that does not exist') as HTMLCanvasElement;\n}\n\nfunction Drawer() {\n  const myCanvas = useRef<HTMLCanvasElement>(getTempCanvas());\n  const [inputPoints, setInputPoints] = useState<Point[]>([]);\n  const [inputSegments, setInputSegments] = useState<Segment[]>([]);\n  const [scene] = useState<Scene>(new Scene());\n  const sceneDrawer = useMemo(() => new SceneDrawer(), []);\n  const mouseEvents = useMemo(() => new MouseEvents(), []);\n\n  useEffect(() => {\n    const renderer = new WebGLRenderer({ canvas: myCanvas.current });\n    renderer.setClearColor(new Color('white'));\n    const camera = new OrthographicCamera(- myCanvas.current.width / 2, myCanvas.current.width / 2, myCanvas.current.height / 2, myCanvas.current.height / -2, 0.01, 2000);\n    camera.position.z = 50;\n    mouseEvents.canvas = myCanvas.current;\n    const animate = function () {\n      requestAnimationFrame(animate);\n      renderer.render(scene, camera);\n    };\n    animate();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    sceneDrawer.draw(scene, inputPoints, inputSegments);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [inputPoints, inputSegments]);\n\n  const onMouseDown = function (e: React.MouseEvent) {\n    const res = mouseEvents.onMouseDown(e);\n    if (res.length !== 3)\n      throw Error('onMouseDown must return 3 items, (Point | Segment | Polygon | null)')\n    const point = res[0] as Point;\n    const segment = res[1] as Segment;\n    if (point)\n      setInputPoints([...inputPoints, point]);\n    if (segment)\n      setInputSegments([...inputSegments, segment]);\n  }\n\n  return (\n    <canvas onMouseDown={onMouseDown} ref={myCanvas} width=\"500\" height=\"500\" style={{ border: \"1px solid black\" }}></canvas>\n  );\n}\n\nexport default Drawer;\n","import React from 'react';\nimport classes from './styles/button.module.scss';\nimport classNames from \"classnames\";\n\nexport interface ButtonProps {\n  onClick: (value: string) => void;\n  value: string;\n  originalColor: string;\n  clickedColor: string;\n  isClicked: boolean;\n}\n\nfunction Button(props: ButtonProps) {\n  const style = {\n    backgroundColor: props.originalColor\n  };\n  const myClasses = classNames({\n    [classes.myButton]: true,\n    [classes.clicked]: props.isClicked\n  });\n\n  if (props.isClicked) {\n    style.backgroundColor = props.clickedColor;\n  }\n  const onClick = function () {\n    if (!props.isClicked)\n      props.onClick(props.value);\n  }\n  return <button style={style} onClick={onClick} className={myClasses}>{props.value}</button>\n}\n\nexport default Button;","import React, { useCallback } from \"react\";\nimport Button, { ButtonProps } from \"./Button\";\n\ninterface Props {\n  buttons: ButtonProps[];\n}\n\nconst ButtonsList = function (props: Props) {\n  const onClick = useCallback(\n    function (value: string): void {\n      debugger;\n      //TODO: Change the current drawingContext\n      const button = props.buttons.find((b) => b.value === value);\n      if (!button) throw Error(`value ${value} must be found!`);\n\n      if (button.isClicked)\n        throw Error(\n          `this function should not be called if the button is already clicked!`\n        );\n\n      //set all buttons isClicked to false, except for the newly clicked button\n      // const newButtons = props.buttons.map((button) =>\n      //   button.value === value\n      //     ? { ...button, isClicked: true }\n      //     : { ...button, isClicked: false }\n      // );\n    },\n    [props.buttons]\n  );\n\n  console.log(\"ButtonsList\", props);\n\n  return (\n    <div>\n      {props.buttons.map((button) => {\n        const newButton = {\n          ...button,\n          onClick: (value: string) => {\n            debugger;\n            onClick(value);\n            button.onClick(value);\n          },\n        };\n        return <Button key={newButton.value} {...newButton}></Button>;\n      })}\n    </div>\n  );\n};\n\nexport { ButtonsList };\n","import React from \"react\";\nimport { ButtonProps } from \"./Button\";\nimport { ButtonsList } from \"./ButtonsList\";\n\ninterface Props {\n  buttons: Omit<ButtonProps, \"onClick\">[];\n}\n\nfunction DrawingPalette(props: Props) {\n  const onClick = function (value: string) {\n    alert(value);\n  };\n\n  const buttons = props.buttons.map((b) => ({ ...b, onClick }));\n\n  return (\n    <div className=\"btn-group-vertical\">\n      <ButtonsList buttons={buttons} />\n    </div>\n  );\n}\n\nexport default DrawingPalette;\n","import React from 'react';\n\nexport const DrawingContext = React.createContext('DrawingContext');","import React from 'react';\n\n\nexport const StatesPlayer = function () {\n  return <>\n    <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n      <button type=\"button\" className=\"btn btn-primary\">{'<<'}</button>\n      <button type=\"button\" className=\"btn btn-primary\">{'<'}</button>\n      <button type=\"button\" className=\"btn btn-primary\">{'Start'}</button>\n      <button type=\"button\" className=\"btn btn-primary\">{'>'}</button>\n      <button type=\"button\" className=\"btn btn-primary\">{'>>'}</button>\n    </div>\n    <br></br>\n    <div className=\"progress\">\n      <div className=\"progress-bar progress-bar-striped progress-bar-animated\" role=\"progressbar\" style={{ width: \"75%\" }}></div>\n    </div>\n  </>\n}\n","import React from \"react\";\nimport { ButtonsList } from \"./ButtonsList\";\ninterface AlgorithmsListPropTypes {\n  names: string[];\n}\n\nconst AlgorithmsList = function (props: AlgorithmsListPropTypes) {\n  const onClick = function (value: string) {\n    alert(`algorithm: ${value}`);\n  };\n  const buttons = props.names.map((name) => ({\n    value: name,\n    //TODO: Get those from config.\n    clickedColor: \"darkblue\",\n    originalColor: \"lightblue\",\n    isClicked: false,\n    onClick: onClick,\n  }));\n  return (\n    <>\n      <h2>Algorithms</h2>\n      <ButtonsList buttons={buttons} />\n    </>\n  );\n};\n\nexport default AlgorithmsList;\n","import React from \"react\";\nimport Drawer from \"./Drawer\";\nimport DrawingPalette from \"./DrawingPalette\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { DrawingContext } from \"./DrawingContext\";\nimport { StatesPlayer } from \"./StatesPlayer\";\nimport AlgorithmsList from \"./AlgorithmsList\";\n\n//TODO: Move that to config.\nconst drawingButtons = (function () {\n  const ret = [\n    {\n      isClicked: true,\n      value: \"Nothing\",\n      originalColor: \"lightgrey\",\n      clickedColor: \"grey\",\n    },\n    {\n      isClicked: false,\n      value: \"Point\",\n      originalColor: \"#fe2636\",\n      clickedColor: \"darkred\",\n    },\n    {\n      isClicked: false,\n      value: \"Line\",\n      originalColor: \"#f5dd33\",\n      clickedColor: \"#f9a905\",\n    },\n    {\n      isClicked: false,\n      value: \"Polygon\",\n      originalColor: \"#90eb35\",\n      clickedColor: \"green\",\n    },\n  ];\n  return ret;\n})();\nconst algorithms = [\"algo 1\", \"algo 2\"];\nfunction App() {\n  return (\n    <DrawingContext.Provider value={\"Nothing\"}>\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-sm-3\">\n            <AlgorithmsList names={algorithms} />\n          </div>\n          <div className=\"col-sm-6\">\n            <Drawer />\n            <StatesPlayer />\n          </div>\n          <div className=\"col-sm-3\">\n            <DrawingPalette buttons={drawingButtons} />\n          </div>\n        </div>\n      </div>\n    </DrawingContext.Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"clicked\":\"button_clicked__R6E18\",\"myButton\":\"button_myButton__2Rz3z\",\"wiggle\":\"button_wiggle__3rqZd\"};"],"sourceRoot":""}